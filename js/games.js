// --- –ò–≥—Ä–∞ 1: –ü–µ—Ä–µ–ø—É—Ç–∞–Ω–Ω—ã–µ –ë—É–∫–≤—ã (Scrambled Letters) ---

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤ —Å—Ä–∞–∑—É
const scrambledLettersData = [
    // –ö–æ—Ä–æ—Ç–∫–∏–µ (3-4 –±—É–∫–≤—ã) - 20+ —Å–ª–æ–≤
    { word: "–î–û–ú", emoji: "üè†" }, { word: "–ö–û–¢", emoji: "üêà" }, { word: "–°–£–ü", emoji: "üç≤" },
    { word: "–ú–Ø–ß", emoji: "‚öΩ" }, { word: "–õ–ï–°", emoji: "üå≥" }, { word: "–î–£–ë", emoji: "üå≥" },
    { word: "–†–´–ë–ê", emoji: "üê†" }, { word: "–£–¢–ö–ê", emoji: "ü¶Ü" }, { word: "–í–û–î–ê", emoji: "üíß" },
    { word: "–ù–ï–ë–û", emoji: "‚òÅÔ∏è" }, { word: "–õ–£–ù–ê", emoji: "üåô" }, { word: "–•–õ–ï–ë", emoji: "üçû" },
    { word: "–°–´–†", emoji: "üßÄ" }, { word: "–ü–ê–†–ö", emoji: "üèûÔ∏è" }, { word: "–°–¢–í–û–õ", emoji: "ü™µ" }, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ä–µ–≤–æ –¥–ª—è —Å—Ç–≤–æ–ª–∞
    { word: "–°–¢–£–õ", emoji: "ü™ë" }, { word: "–®–ê–†", emoji: "üéà" }, { word: "–§–õ–ê–ì", emoji: "üö©" },
    { word: "–ö–õ–Æ–ß", emoji: "üîë" }, { word: "–ú–û–°–¢", emoji: "üåâ" }, { word: "–ß–ê–°–´", emoji: "üï∞Ô∏è" },

    // –°—Ä–µ–¥–Ω–∏–µ (5-6 –±—É–∫–≤) - 25+ —Å–ª–æ–≤
    { word: "–Ø–ë–õ–û–ö–û", emoji: "üçé" }, { word: "–°–û–õ–ù–¶–ï", emoji: "‚òÄÔ∏è" }, { word: "–ú–ê–®–ò–ù–ê", emoji: "üöó" },
    { word: "–ö–ù–ò–ì–ê", emoji: "üìö" }, { word: "–†–ê–î–£–ì–ê", emoji: "üåà" }, { word: "–ó–í–ï–ó–î–ê", emoji: "‚≠ê" },
    { word: "–¶–í–ï–¢–û–ö", emoji: "üå∏" }, { word: "–®–ö–û–õ–ê", emoji: "üè´" }, { word: "–ú–£–ó–´–ö–ê", emoji: "üéµ" },
    { word: "–ü–¢–ò–ß–ö–ê", emoji: "üê¶" }, { word: "–°–û–ë–ê–ö–ê", emoji: "üêï" }, { word: "–ö–û–†–û–í–ê", emoji: "üêÑ" },
    { word: "–ó–ê–Ø–¶", emoji: "üêá" }, { word: "–°–¢–ê–ö–ê–ù", emoji: "ü•õ" }, { word: "–ö–†–ï–°–õ–û", emoji: "üõãÔ∏è" },
    { word: "–ü–õ–ê–ù–ï–¢–ê", emoji: "ü™ê" }, { word: "–†–ê–ö–ï–¢–ê", emoji: "üöÄ" }, { word: "–ó–ê–ú–û–ö", emoji: "üè∞" },
    { word: "–ó–ï–ë–†–ê", emoji: "ü¶ì" }, { word: "–ë–ê–ù–ê–ù", emoji: "üçå" }, { word: "–ì–†–£–®–ê", emoji: "üçê" },
    { word: "–°–õ–ò–í–ê", emoji: "üçë" }, { word: "–û–ì–û–ù–¨", emoji: "üî•" }, { word: "–†–Æ–ö–ó–ê–ö", emoji: "üéí" },
    { word: "–õ–û–î–ö–ê", emoji: "‚õµ" }, { word: "–®–õ–Ø–ü–ê", emoji: "üëí" }, { word: "–¢–£–ß–ö–ê", emoji: "üå•Ô∏è" },

    // –î–ª–∏–Ω–Ω—ã–µ (7-8 –±—É–∫–≤) - 20+ —Å–ª–æ–≤
    { word: "–ü–û–î–ê–†–û–ö", emoji: "üéÅ" }, { word: "–î–ï–†–ï–í–û", emoji: "üå≥" }, { word: "–ö–ê–†–ê–ù–î–ê–®", emoji: "‚úèÔ∏è" },
    { word: "–¢–ï–õ–ï–§–û–ù", emoji: "üì±" }, { word: "–ü–ò–†–ê–ú–ò–î–ê", emoji: "üî∫" }, { word: "–ê–ü–ï–õ–¨–°–ò–ù", emoji: "üçä" },
    { word: "–ö–ê–†–¢–û–®–ö–ê", emoji: "ü•î" }, { word: "–ö–ê–†–¢–ò–ù–ê", emoji: "üñºÔ∏è" }, { word: "–ü–ê–†–û–í–û–ó", emoji: "üöÇ" },
    { word: "–°–ö–†–ò–ü–ö–ê", emoji: "üéª" }, { word: "–ë–ê–ë–û–ß–ö–ê", emoji: "ü¶ã" }, { word: "–ê–í–¢–û–ë–£–°", emoji: "üöå" },
    { word: "–õ–Ø–ì–£–®–ö–ê", emoji: "üê∏" }, { word: "–ú–û–õ–û–ö–û", emoji: "ü•õ" }, { word: "–°–ê–ü–û–ì–ò", emoji: "üë¢" },
    { word: "–ö–û–ù–§–ï–¢–ê", emoji: "üç¨" }, { word: "–¢–ï–¢–†–ê–î–¨", emoji: "üìì" }, { word: "–ü–û–ú–ò–î–û–†", emoji: "üçÖ" },
    { word: "–ê–ù–ê–ù–ê–°", emoji: "üçç" }, { word: "–ü–û–î–£–®–ö–ê", emoji: "<0xF0><0x9F><0xAB><0x95>" },

    // –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ (> 8 –±—É–∫–≤) - 15+ —Å–ª–æ–≤
    { word: "–ú–û–†–û–ñ–ï–ù–û–ï", emoji: "üç¶" }, { word: "–í–ï–õ–û–°–ò–ü–ï–î", emoji: "üö≤" }, { word: "–°–ê–ú–û–õ–ï–¢", emoji: "‚úàÔ∏è" },
    { word: "–ö–û–†–ê–ë–õ–¨", emoji: "üö¢" }, { word: "–ö–û–ú–ü–¨–Æ–¢–ï–†", emoji: "üíª" }, { word: "–ü–õ–ê–ù–®–ï–¢", emoji: "üì≤" },
    { word: "–§–û–¢–û–ê–ü–ü–ê–†–ê–¢", emoji: "üì∑" }, { word: "–í–ï–†–¢–û–õ–ï–¢", emoji: "üöÅ" }, { word: "–¢–ï–õ–ï–í–ò–ó–û–†", emoji: "üì∫" },
    { word: "–•–û–õ–û–î–ò–õ–¨–ù–ò–ö", emoji: "üßä" }, { word: "–ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†", emoji: "üßÆ" }, { word: "–ß–ï–†–ï–ü–ê–•–ê", emoji: "üê¢" },
    { word: "–ê–í–¢–û–ú–û–ë–ò–õ–¨", emoji: "üöó" }, { word: "–≠–ö–°–ö–ê–í–ê–¢–û–†", emoji: "<0xF0><0x9F><0x9A><0x91>" }, { word: "–ë–ò–ë–õ–ò–û–¢–ï–ö–ê", emoji: "<0xF0><0x9F><0x93><0x9A>" },
    { word: "–í–ò–ù–û–ì–†–ê–î", emoji: "üçá" },
];

let currentScrambledWord = '';
let shuffledLetters = [];
let draggedLetterElement = null;
let score = 0;
let scoreDisplayElement = null;
let restartIconButtonElement = null; // –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞-–∏–∫–æ–Ω–∫–∞ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
let usedWordsThisSession = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤
let currentInteractableLetter = null; // To store the interactable instance
let currentDropzoneInteractable = null; // To store the dropzone interactable instance

// --- Initialization Function ---
function initGames() {
    console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä –∏–∑ games.js...");
    initScrambledLettersGame();
}

// --- –ò–≥—Ä–∞ 1: –ü–µ—Ä–µ–ø—É—Ç–∞–Ω–Ω—ã–µ –ë—É–∫–≤—ã (Scrambled Letters) ---

function initScrambledLettersGame() {
    console.log("Initializing Scrambled Letters Game with interact.js...");
    const gameContainer = document.getElementById('game-scrambled-letters');
    if (!gameContainer) return;

    scoreDisplayElement = document.getElementById('scrambled-score');
    restartIconButtonElement = document.getElementById('restart-icon-btn');
    const placeholdersContainer = gameContainer.querySelector('.letter-placeholders');
    const lettersContainer = gameContainer.querySelector('.draggable-letters');
    const feedbackElement = gameContainer.querySelector('.feedback');
    const imageContainer = gameContainer.querySelector('.word-image p');

    if (!interact) { // Check if interact.js is loaded
        console.error("interact.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!");
        feedbackElement.textContent = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ D&D! –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.";
        return;
    }

    if (!placeholdersContainer || !lettersContainer || !feedbackElement || !imageContainer || !scoreDisplayElement || !restartIconButtonElement) {
        console.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ DOM –¥–ª—è –∏–≥—Ä—ã '–ü–µ—Ä–µ–ø—É—Ç–∞–Ω–Ω—ã–µ –ë—É–∫–≤—ã'.");
        return;
    }

    // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ (–≤–∞–∂–Ω–æ –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ)
    if (currentInteractableLetter) currentInteractableLetter.unset();
    if (currentDropzoneInteractable) currentDropzoneInteractable.unset();

    startGame();
    restartIconButtonElement.addEventListener('click', startGame);

    // --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Draggable –±—É–∫–≤ —Å interact.js --- 
    currentInteractableLetter = interact('#game-scrambled-letters .draggable-letters .letter')
        .draggable({
            inertia: true,
            modifiers: [
                interact.modifiers.restrictRect({
                    restriction: 'parent',
                    endOnly: true
                })
            ],
            autoScroll: true,
            listeners: {
                start(event) {
                    const target = event.target;
                    target.classList.add('dragging');
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞
                    target.setAttribute('data-start-x', target.getBoundingClientRect().left);
                    target.setAttribute('data-start-y', target.getBoundingClientRect().top);
                },
                move(event) {
                    const target = event.target;
                    const x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx;
                    const y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;

                    target.style.transform = `translate(${x}px, ${y}px)`;

                    target.setAttribute('data-x', x);
                    target.setAttribute('data-y', y);
                },
                end(event) {
                    const target = event.target;
                    target.classList.remove('dragging');
                    // –ï—Å–ª–∏ –±—É–∫–≤–∞ –Ω–µ –ø–æ–ø–∞–ª–∞ –≤ dropzone (–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ñ–ª–∞–≥—É)
                    if (!event.relatedTarget || !target.classList.contains('placed-in-dropzone')) {
                         // –ü–ª–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –∏—Å—Ö–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º transform
                         target.style.transform = 'translate(0px, 0px)';
                         target.setAttribute('data-x', 0);
                         target.setAttribute('data-y', 0);
                         console.log('Letter returned to start', target.textContent);
                    }
                     target.classList.remove('placed-in-dropzone'); // –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–ª–∞–≥
                }
            }
        });

    // --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Dropzone –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ —Å interact.js --- 
     currentDropzoneInteractable = interact('#game-scrambled-letters .placeholder').dropzone({
         accept: '#game-scrambled-letters .draggable-letters .letter', // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏–∑ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
         overlap: 0.5, // –¢—Ä–µ–±—É–µ–º 50% –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
         listeners: {
             dragenter(event) {
                 const dropzoneElement = event.target;
                 const draggableElement = event.relatedTarget;
                 if (!dropzoneElement.hasChildNodes()) { // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ
                      dropzoneElement.classList.add('over');
                      draggableElement.classList.add('can-drop');
                 }
             },
             dragleave(event) {
                 event.target.classList.remove('over');
                 event.relatedTarget.classList.remove('can-drop');
             },
             drop(event) {
                 const dropzoneElement = event.target;
                 const draggableElement = event.relatedTarget;

                 dropzoneElement.classList.remove('over');
                 draggableElement.classList.remove('can-drop');

                 if (dropzoneElement.hasChildNodes()) {
                    console.log('Drop ignored: Placeholder occupied.');
                    // interact.js —Å–∞–º –≤–µ—Ä–Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç, –µ—Å–ª–∏ drop –Ω–µ —É–¥–∞–ª—Å—è
                    return;
                 }

                 const letter = draggableElement.dataset.letter;
                 const targetIndex = parseInt(dropzoneElement.dataset.index);
                 console.log(`Drop event: Letter '${letter}' dropped on placeholder index ${targetIndex}`);

                if (currentScrambledWord[targetIndex] === letter) {
                    // –ü—Ä–∞–≤–∏–ª—å–Ω–æ!
                    dropzoneElement.appendChild(draggableElement);
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º transform –∏ data-x/y
                    draggableElement.style.transform = 'translate(0px, 0px)';
                    draggableElement.setAttribute('data-x', 0);
                    draggableElement.setAttribute('data-y', 0);
                    draggableElement.classList.add('placed');
                    draggableElement.classList.add('placed-in-dropzone'); // –§–ª–∞–≥, —á—Ç–æ –±—É–∫–≤–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ—â–µ–Ω–∞

                    // –û—Ç–∫–ª—é—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è —ç—Ç–æ–π –±—É–∫–≤—ã
                    // interact(draggableElement).unset(); // –ù–µ —Å—Ç–æ–∏—Ç –æ—Ç–∫–ª—é—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ —Å—Ç–∏–ª–∏–∑—É–µ–º
                    interact(draggableElement).draggable(false);

                    feedbackElement.textContent = 'üëç –û—Ç–ª–∏—á–Ω–æ!';
                    feedbackElement.className = 'feedback success';
                    playSound('correctSound');
                    checkWordCompletion();
                } else {
                    // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!
                    feedbackElement.textContent = 'ü§î –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é –±—É–∫–≤—É!';
                    feedbackElement.className = 'feedback error';
                    playSound('errorSound');
                    // interact.js –≤–µ—Ä–Ω–µ—Ç –±—É–∫–≤—É –Ω–∞ –º–µ—Å—Ç–æ —Å–∞–º (—á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏–µ dragend)
                }
             }
         }
     });

    function determineWordLengthRange() {
        let minLength, maxLength;
        const scoreLevel = Math.floor(score / 5); // –£—Ä–æ–≤–µ–Ω—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –æ—á–∫–æ–≤

        switch (scoreLevel) {
            case 0: minLength = 3; maxLength = 4; break;
            case 1: minLength = 4; maxLength = 5; break;
            case 2: minLength = 5; maxLength = 6; break;
            case 3: minLength = 6; maxLength = 7; break;
            case 4: minLength = 7; maxLength = 8; break;
            default: minLength = 8; maxLength = Math.max(...scrambledLettersData.map(w => w.word.length)); break;
        }
        console.log(`Score: ${score} (Level: ${scoreLevel}), Difficulty Range: ${minLength}-${maxLength} letters`);
        return { minLength, maxLength };
    }

    function setupNewWord() {
        console.log("Setting up new word...");
        feedbackElement.textContent = '';
        feedbackElement.className = 'feedback';

        const { minLength, maxLength } = determineWordLengthRange();
        let availableWords = scrambledLettersData.filter(item =>
            item.word.length >= minLength &&
            item.word.length <= maxLength &&
            !usedWordsThisSession.includes(item.word)
        );
        if (availableWords.length === 0) {
            console.log("No unused words found for current difficulty, trying any unused words...");
            availableWords = scrambledLettersData.filter(item => !usedWordsThisSession.includes(item.word));
        }
        if (availableWords.length === 0) {
             feedbackElement.textContent = "üéâ –£—Ä–∞! –¢—ã –ø—Ä–æ—à–µ–ª –í–°–ï —Å–ª–æ–≤–∞! üéâ";
             feedbackElement.className = 'feedback success';
             if(lettersContainer) lettersContainer.innerHTML = '';
             if(placeholdersContainer) placeholdersContainer.innerHTML = '';
             if(imageContainer) imageContainer.textContent = 'üèÜ';
             console.log("All words completed in this session!");
             return;
        }

        const randomIndex = Math.floor(Math.random() * availableWords.length);
        const selectedWordData = availableWords[randomIndex];
        currentScrambledWord = selectedWordData.word;
        usedWordsThisSession.push(currentScrambledWord);
        const currentEmoji = selectedWordData.emoji;
        console.log("Selected word:", currentScrambledWord, `(Length: ${currentScrambledWord.length})`, `Used: ${usedWordsThisSession.length}/${scrambledLettersData.length}`);

        shuffledLetters = currentScrambledWord.split('').sort(() => Math.random() - 0.5);
        if (shuffledLetters.join('') === currentScrambledWord && currentScrambledWord.length > 1) {
             shuffledLetters = currentScrambledWord.split('').sort(() => Math.random() - 0.5);
        }

        if(placeholdersContainer) placeholdersContainer.innerHTML = '';
        if(lettersContainer) lettersContainer.innerHTML = '';
        if(imageContainer) imageContainer.textContent = currentEmoji;

        for (let i = 0; i < currentScrambledWord.length; i++) {
            const placeholder = document.createElement('div');
            placeholder.classList.add('placeholder');
            placeholder.dataset.index = i;
            if(placeholdersContainer) placeholdersContainer.appendChild(placeholder);
        }

        shuffledLetters.forEach((letter, index) => {
            const letterDiv = document.createElement('div');
            letterDiv.classList.add('letter');
            letterDiv.textContent = letter;
            letterDiv.dataset.letter = letter;
            letterDiv.id = `letter-${index}-${Date.now()}`;
             // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏ –∏ data –∞—Ç—Ä–∏–±—É—Ç—ã –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
             letterDiv.style.transform = 'translate(0px, 0px)';
             letterDiv.setAttribute('data-x', 0);
             letterDiv.setAttribute('data-y', 0);
             letterDiv.classList.remove('placed', 'placed-in-dropzone');
            if(lettersContainer) lettersContainer.appendChild(letterDiv);
        });

        // –¢–µ–ø–µ—Ä—å interact.js —Å–∞–º –Ω–∞–π–¥–µ—Ç –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ –Ω—É–∂–Ω–æ, –µ—Å–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –Ω–µ –º–µ–Ω—è—é—Ç—Å—è.
         // –ù–æ –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –¥–ª—è –Ω–æ–≤—ã—Ö –±—É–∫–≤ –≤–∫–ª—é—á–µ–Ω draggable
         if(currentInteractableLetter) {
            // interact('.letter').draggable(true); // –í–∫–ª—é—á–∞–µ–º –¥–ª—è –≤—Å–µ—Ö .letter
             // –û–±–Ω–æ–≤–ª—è–µ–º? –ù–µ—Ç, interact.js –¥–æ–ª–∂–µ–Ω –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç—å –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É
         }

        console.log("New word setup complete.");
    }

    // --- –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞/—Ä–µ—Å—Ç–∞—Ä—Ç–∞ --- 
    function startGame() {
        console.log("Starting/Restarting game...");
        score = 0;
        usedWordsThisSession = [];
        updateScoreDisplay();
        currentScrambledWord = '';
        // –í–∞–∂–Ω–æ: –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
        if(lettersContainer) lettersContainer.innerHTML = '';
        if(placeholdersContainer) placeholdersContainer.innerHTML = '';
        setupNewWord(); // –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    }

    // --- –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ ---
    function updateScoreDisplay() {
         if (scoreDisplayElement) {
             scoreDisplayElement.textContent = score;
         }
     }

    function checkWordCompletion() {
        if(!placeholdersContainer) return; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        const placeholders = placeholdersContainer.querySelectorAll('.placeholder');
        let allPlacedCorrectly = true;
        if(placeholders.length !== currentScrambledWord.length) {
            allPlacedCorrectly = false; // –ï—Å–ª–∏ —á–∏—Å–ª–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
        }
        placeholders.forEach((p, index) => {
            const child = p.querySelector('.letter');
            if (!child || child.dataset.letter !== currentScrambledWord[index]) {
                allPlacedCorrectly = false;
            }
        });

        if (allPlacedCorrectly) {
            console.log("Word completed!");
            score++;
            updateScoreDisplay();
            feedbackElement.textContent = 'üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –°–ª–æ–≤–æ —Å–æ–±—Ä–∞–Ω–æ! üéâ';
            feedbackElement.className = 'feedback success win';
            playSound('winSound');

            const gameArea = gameContainer?.querySelector('.game-area'); // –î–æ–±–∞–≤–∏–º ?. –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if (gameArea) {
                createFireworks(gameArea);
                createConfetti(document.body);
            } else {
                 console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ .game-area –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤.");
            }

            console.log("Starting timer for next word...");
            setTimeout(() => {
                console.log("Timer finished, setting up new word.");
                setupNewWord();
            }, 3000); 

             // –î–µ–ª–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –¥–ª—è dropzone (–±—É–∫–≤—ã —É–∂–µ –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å)
             if (currentDropzoneInteractable) {
                // interact('#game-scrambled-letters .placeholder').dropzone(false); // –û—Ç–∫–ª—é—á–∞–µ–º dropzone –≤—Ä–µ–º–µ–Ω–Ω–æ? –ò–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ?
             }
        }
    }
}
// --- –ö–æ–Ω–µ—Ü –ò–≥—Ä—ã 1: –ü–µ—Ä–µ–ø—É—Ç–∞–Ω–Ω—ã–µ –ë—É–∫–≤—ã ---

// --- –ó–¥–µ—Å—å –±—É–¥—É—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä ---
// function initCatchSyllablesGame() { ... }

// --- Wait for DOM and then initialize all games ---
document.addEventListener('DOMContentLoaded', () => {
    console.log("DOM loaded, initializing games from games.js...");
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ Reveal.js, –Ω–æ –æ–±—ã—á–Ω–æ DOMContentLoaded –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
    // if (Reveal.isReady()) { ... }
    initGames();
});

// --- End of Game Logic ---